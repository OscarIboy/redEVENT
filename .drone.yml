clone:
 default:
   image: plugins/git
   recursive: false

pipeline:
  00-cache:
    group: 00-setup
    image: redwebaps/redevent-cache:dev
    pull: true
    commands:
      # redEVENT Composer cache
      - mv /opt/cache/redEVENT/vendor .
      - touch tests/.cache.composer.tmp
      # redEVENT npm cache
      - mv /opt/cache/redEVENT/node_modules .
      - touch tests/.cache.npm.tmp
      # Joomla CMS
      - mv /opt/cache/joomla-cms tests
      - touch tests/.cache.joomla-cms.tmp

      # redCORE
      - mkdir -p tests/extension/redCORE
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/redCORE.tgz --decrypt /opt/cache/redCORE.tgz.gpg
      - tar -xzf /opt/cache/redCORE.tgz -C tests/extension/redCORE
      - touch tests/.cache.redCORE.tmp

      # redFORM
      - mkdir -p tests/extension/redFORM
      - gpg --pinentry-mode loopback --passphrase "6f8f19c330a0f899458e4b0670824deb8cdfe391" -o /opt/cache/redFORM.tgz --decrypt /opt/cache/redFORM.tgz.gpg
      - tar -xzf /opt/cache/redFORM.tgz -C tests/extension/redFORM
      - touch tests/.cache.redFORM.tmp

  00-setup:
    group: 00-setup
    image: redwebaps/testbox-chromedriver:2.38
    # pull: true
    environment:
      - tests_user=admin
      - tests_suite=00-setup
      - tests_db=setup
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-00-a-setup
    commands:
      # Regular entry point
      - /entrypoint.sh &
      # Composer setup
      - while [ ! -f tests/.cache.composer.tmp ]; do sleep 1; done          # Comment if not using composer cache
      - composer config -g github-oauth.github.com 6f8f19c330a0f899458e4b0670824deb8cdfe391
      #- composer install --prefer-dist                                    # Uncomment if not using composer cache
      # NPM setup
      - while [ ! -f tests/.cache.npm.tmp ]; do sleep 1; done               # Comment if not using npm cache
      # - npm install                                                       # Uncomment if not using npm cache
      # redEVENT installer release
      #- while [ ! -f tests/.cache.composer.library.tmp ]; do sleep 1; done  # Comment if not using composer cache for libraries
      - mv vendor tests/
      - mv node_modules build
      - cd build
      - mv gulp-config.json.dist gulp-config.json
      - npm install gulp -g
      - gulp release --skip-version testsRelease
      - cd ../tests/extension/redCORE/build
      - cp gulp-config.json.dist gulp-config.json
      - npm install gulp -g
      - gulp release --skip-version
      - cd ../../../
      - cp extension/redCORE/tests/releases/redCORE.zip releases/
      - cd releases
      - ls
      - cd ../
      # Codeception setup
      - cp acceptance.suite.yml.dist.drone acceptance.suite.yml
      # Test setup
      #- while [ ! -f tests/.cache.joomla-cms.tmp ]; do sleep 1; done        # Comment if not using Joomla CMS cache
      #- vendor/bin/robo tests:site-preparation 1 1
      # Ownership for uid 82
      - chown -R www-data:www-data .
      # Creating first clone for tests setup
      - mkdir -p $tests_suite/joomla-cms
      - rsync -a joomla-cms/ $tests_suite/joomla-cms
      - cd 00-setup
      - cd ../
      # Creates the database (required because of the Codeception Db module)
      - mysql -u root -proot -h db -e "CREATE DATABASE $tests_db"
      - su www-data -c 'vendor/bin/robo tests:setup 1 1'

  00-setup-stages:
    group: tests
    image: redwebaps/testbox-chromedriver:2.38
    environment:
      - tests_user=admin
      - tests_suite=00-setup
      - tests_db=setup
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-00-b-setup-stages
    commands:
      # Final DB dump with full Joomla/extension setup
      - rsync -a --delete tests/$tests_suite/joomla-cms/ tests/joomla-cms
      - sed -i "s/db = '$tests_db'/db = 'tests_db'/g" tests/joomla-cms/configuration.php
      - sed -i "s,$tests_suite/joomla-cms/,joomla-cms/,g" tests/joomla-cms/configuration.php
      - mysqldump -u root -proot -h db $tests_db > tests/dbdump.sql.tmp

      # Stages setup
      - sh tests/drone/setup-stages.sh "administrator"    "01-administrator"
#      - sh tests/drone/setup-stages.sh "category"         "02-category"
#      - sh tests/drone/setup-stages.sh "venuecategory"    "03-venue-category"
#      - sh tests/drone/setup-stages.sh "template"         "04-template"
#      - sh tests/drone/setup-stages.sh "venue"            "05-venue"
#      - sh tests/drone/setup-stages.sh "event"            "06-event"
#      - sh tests/drone/setup-stages.sh "tag"              "07-tag"
#      - sh tests/drone/setup-stages.sh "customfield"      "08-custom-field"
#      - sh tests/drone/setup-stages.sh "role"             "09-role"
#      - sh tests/drone/setup-stages.sh "pricegroup"       "10-price-group"
#      - sh tests/drone/setup-stages.sh "session"          "11-session"
#      - sh tests/drone/setup-stages.sh "bundle"           "12-bundle"
#      - sh tests/drone/setup-stages.sh "categoryfilter"   "13-categoryfilter"
#      - sh tests/drone/setup-stages.sh "venuecategoryfilter"    "14-venue-category-filter"
#      - sh tests/drone/setup-stages.sh "templatefilter"   "15-template-filter"
#      - sh tests/drone/setup-stages.sh "venuefilter"      "16-venue-filter"
#      - sh tests/drone/setup-stages.sh "eventfilter"      "17-event-filter"
#      - sh tests/drone/setup-stages.sh "tagfilter"        "18-tag-filter"
#      - sh tests/drone/setup-stages.sh "customfieldfilter"      "19-custom-field-filter"
#      - sh tests/drone/setup-stages.sh "rolefilter"       "20-role-filter"
#      - sh tests/drone/setup-stages.sh "pricegroupfilter" "21-price-group-filter"
#      - sh tests/drone/setup-stages.sh "sessionfilter"    "22-session-filter"
#      - sh tests/drone/setup-stages.sh "bundlefilter"     "23-bundle-filter"
#      - sh tests/drone/setup-stages.sh "viewdetail"       "24-view-detail"


  01-administrator:
    group: tests
    image: redwebaps/testbox-chromedriver:2.38
    environment:
      - tests_user=admin
      - tests_suite=01-administrator
      - tests_db=administrator
      - build_path=/drone/src/github.com/${DRONE_REPO}
      - output_append=-01-administrator
    commands:
      # Regular entry point
      - /entrypoint.sh &
      # Performs test after ensuring that the scenario has been fully set up
      - while [ ! -f tests/.cache.setup.$tests_suite.tmp ]; do sleep 1; done
      - cd tests
      # Performs test
      - su www-data -c 'vendor/bin/robo tests:run acceptance/administrator 1 1'

  slack:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: redevent
    when:
      status: [ success, failure ]
    template: >
      {{#success build.status}}
        {{repo.name}} PR #{{build.pull}} succeeded in {{since build.started}}. Good job {{build.author}}!  Here is the build log: {{build.link}}.  Link to the PR: https://github.com/{{repo.owner}}/{{repo.name}}/pull/{{build.pull}}
      {{else}}
        {{repo.name}} PR #{{build.pull}} failed in {{since build.started}}. Fix me please {{build.author}}!  Here is the build log: {{build.link}}.  Link to the PR: https://github.com/{{repo.owner}}/{{repo.name}}/pull/{{build.pull}}
      {{/success}}

  error-report:
    image: redwebaps/testbox-chromedriver:2.38
    commands:
      - if [ -z "${CI_PULL_REQUEST}" ]; then export CI_PULL_REQUEST=1; fi
      - cd tests
      - vendor/bin/robo send:build-report-error-slack redcomponent 365447364384436 Q94UM5kjZkZIrau8MIL93m0dN6U "$CI_REPO" "$CI_PULL_REQUEST" "https://hooks.slack.com/services/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" "#redevent" "$CI_BUILD_URL"
    when:
      status: [ failure ]

services:
  db:
    image: mysql/mysql-server:5.7
    # pull: true
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_ROOT_HOST=%

  php:
    image: redwebaps/php-apache:7.0
    # pull: true
    environment:
      - WEB_DOCUMENT_ROOT=/drone/src/github.com/${DRONE_REPO}
      - JOOMLA_INSTALLATION_DISABLE_LOCALHOST_CHECK=1